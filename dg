#!/bin/bash

# @TODO this file is getting huge, break it up into smaller scripts.

# Globals
APP_MODULES_DIRECTORY="modules"
APP_MODULES_CONTRIB_DIRECTORY="$APP_MODULES_DIRECTORY/contrib"
APP_MODULES_CUSTOM_DIRECTORY="$APP_MODULES_DIRECTORY/custom"
APP_THEMES_DIRECTORY="themes"
APP_BACKUPS_DIRECTORY=".drupalgap-backups"
DRUPALGAP_JS_URL="https://raw.githubusercontent.com/signalpoint/DrupalGap/8.x-1.x/drupalgap.js"
DRUPALGAP_MIN_JS_URL="https://raw.githubusercontent.com/signalpoint/DrupalGap/8.x-1.x/drupalgap.min.js"

# DL | DOWNLOAD
function drupalgap_download_project() {

  # Make sure they provided a project name.
  if [ -z "$1" ]
    then
      echo -e "Missing project name... try this:\n./drupalgap dl foo"
      exit 1
  fi

  # Create default directories if they don't exist.
  if [ -d "$APP_MODULES_DIRECTORY" ]; then
      mkdir "$APP_MODULES_DIRECTORY"
  fi
  if [ -d "$APP_MODULES_CONTRIB_DIRECTORY" ]; then
      mkdir "$APP_MODULES_CONTRIB_DIRECTORY"
  fi

  # @TODO support Macs with curl instead of wget

  # Grab the project name and determine the destination directory for it.
  PROJECT="$1"
  MODULE_DIR="$APP_MODULES_CONTRIB_DIRECTORY/$PROJECT"

  # Check to see if the project already exists.
  if [ -d "$MODULE_DIR" ]; then
    read -p "The $PROJECT project already exists, overwrite it? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
      exit 1
    else
      rm -rf "$MODULE_DIR"
      echo "Removed $MODULE_DIR directory"
    fi
  fi

  # Determine which branch to download.
  BRANCH="8.x-1.x"
  if [ $# -eq 2 ]; then
    BRANCH=$2
  fi

  # Figure out the github.com zip file url.
  ZIP_FILE_NAME="$BRANCH.zip"
  USER_NAME="signalpoint"
  URL="https://github.com/$USER_NAME/$PROJECT/archive/$ZIP_FILE_NAME"

  # Go into the modules directory, then download and unzip the project,
  # renaming it to the project name and then delete the zip file.
  cd "$APP_MODULES_DIRECTORY"
  wget "$URL" --no-check-certificate
  unzip "$BRANCH"
  rm "$ZIP_FILE_NAME"
  mv "$PROJECT-$BRANCH" "$PROJECT"
  echo "Downloaded $PROJECT to $MODULE_DIR"

}

# UPDATE
function drupalgap_update() {

  # Create the drupalgap_backups directory if it doesn't already exit.
  if [ ! -d "$APP_BACKUPS_DIRECTORY" ]
    then
      mkdir $APP_BACKUPS_DIRECTORY
  fi

  # Create a directory to store this round of backups.
  TEMP_DIR="$APP_BACKUPS_DIRECTORY/"
  TEMP_DIR+=$(date +%Y%m%d%H%M%S)
  mkdir $TEMP_DIR

  # Ask them if they're sure?
  read -p "Are you sure you want to update the DrupalGap SDK? " -n 1 -r
  echo    # (optional) move to a new line
  if [[ ! $REPLY =~ ^[Yy]$ ]]
  then
    rmdir $TEMP_DIR
    exit 1
  fi

  # Make a copy of the current bin directory.
  cp -r drupalgap.js drupalgap.min.js $TEMP_DIR

  # If drupalgap.js or drupalgap.min.js exist, remove them.
  if [ -f drupalgap.js ]; then
    rm drupalgap.js
  fi
  if [ -f drupalgap.min.js ]; then
    rm drupalgap.min.js
  fi

  # Download the latest binaries.
  wget "$DRUPALGAP_JS_URL" --no-check-certificate
  wget "$DRUPALGAP_MIN_JS_URL" --no-check-certificate

  # Let the developer know what happened.
  echo -e "Backups saved to: $TEMP_DIR\nDrupalGap SDK update complete!"

  # Warn the developer if their index.html file needs to be updated.
  FOUND_BIN=false
  if grep -Fq "drupalgap.js"  index.html
  then
      FOUND_BIN=true
  fi
  if ! $FOUND_BIN && grep -Fq "drupalgap.min.js" index.html
  then
      FOUND_BIN=true
  fi
  if ! $FOUND_BIN
  then
    echo "NOTE, update the index.html file to load: drupalgap.min.js"
  fi

}

# MODULE CREATE
function drupalgap_create_module() {

  MODULE_NAME="$1";
  MODULE_DIRECTORY="$APP_MODULES_CUSTOM_DIRECTORY/$MODULE_NAME"
  HOOK_MENU="$MODULE_NAME"
  HOOK_MENU+="_menu"
  PAGE_CALLBACK="$MODULE_NAME"
  PAGE_CALLBACK+="_page"
  FILE_URI="$MODULE_DIRECTORY/$MODULE_NAME.js"

  # Create the app/modules directory if it doesn't exist.
  if [ ! -d "$APP_MODULES_DIRECTORY" ]; then
    mkdir $APP_MODULES_DIRECTORY
  fi

  # Create the app/modules/custom directory if it doesn't exist.
  if [ ! -d "$APP_MODULES_CUSTOM_DIRECTORY" ]; then
    mkdir $APP_MODULES_CUSTOM_DIRECTORY
  fi

  # Create the module's directory, or warn if it already exists.
  if [ -d "$MODULE_DIRECTORY" ]; then
    echo "$MODULE_NAME already exists..."
    exit
  fi

  mkdir $MODULE_DIRECTORY
  echo "dg.createModule('$MODULE_NAME');

/**
 * Defines routes for $MODULE_NAME.
 */
$MODULE_NAME.routing = function() {
  var routes = {};

  // My example page route.
  routes[\"$MODULE_NAME.example\"] = {
    \"path\": \"/hello-world\",
    \"defaults\": {
      \"_title\": \"Hello World\",
      \"_controller\": function() {

        return new Promise(function(ok, err) {

          // Make a greeting for the current user.
          var account = dg.currentUser();
          var msg = account.isAuthenticated() ?
            'Hello ' + account.getAccountName() :
            'Hello World';

          // Prepare our page's render element.
          var element = {};
          element['my_widget'] = {
            _markup: '<p>' + msg + '</p>'
          };

          // Send the element back to be rendered on the page.
          ok(element);

        });

      }
    }
  };

  return routes;
};" > "$FILE_URI"
  
  # Find the line number after the settings.js include.
  INSERT_LINE=$(( `cat index.html | grep -n "settings.js" | awk '{ print $1 }' | tr -d ':'` +1 ))
  # insert the module include at that line
  sed -i "${INSERT_LINE}i \    <script src=\"$FILE_URI\"></script>" index.html

  echo "
Created module in $MODULE_DIRECTORY

The following has been added to your index.html:

<script src=\"$FILE_URI\"></script>
"

}

function drupalgap_create_theme() {

  THEME_NAME="$1";
  THEME_CLASS_NAME="${THEME_NAME^}"
  THEME_DIRECTORY="$APP_THEMES_DIRECTORY/$THEME_NAME"
  FILE_URI="$THEME_DIRECTORY/$THEME_NAME.js"

  # Create the app/themes directory if it doesn't exist.
  if [ ! -d "$APP_THEMES_DIRECTORY" ]; then
    mkdir $APP_THEMES_DIRECTORY
  fi

  # Create the theme's directory, or warn if it already exists.
  if [ -d "$THEME_DIRECTORY" ]; then
    echo "$THEME_NAME already exists..."
    exit
  fi

  mkdir $THEME_DIRECTORY


# WARNING: any changes here should be reflected in the "create a custom theme" docs.

    echo "// The $THEME_NAME theme constructor.
dg.themes.$THEME_CLASS_NAME = function() {
  this.regions = {
    header: { },
    content: { },
    footer: { }
  };
};
// Extend the DrupalGap Theme prototype.
dg.themes.$THEME_CLASS_NAME.prototype = new dg.Theme;
dg.themes.$THEME_CLASS_NAME.prototype.constructor = dg.themes.$THEME_CLASS_NAME;" > "$FILE_URI"
  echo "1. Include it in the index.html file:

<script src=\"$FILE_URI\"></script>

2. Set it as the active theme in the settings.js file:

// The active theme.
drupalgap.settings.theme = {
  name: '$THEME_NAME',
  path: 'themes/$THEME_NAME'
};

3. Add some blocks to the theme's regions in the settings.js file:

drupalgap.settings.blocks[dg.config('theme').name] = {
  header: {

    // DrupalGap's administration menu block.
    admin_menu: {
      roles: [
        { target_id: 'administrator', visible: true }
      ]
    }

  },
  content: {

    // DrupalGap's page title block.
    title: { },

    // DrupalGap's "main" content block.
    main: { }

  },
  footer: {

    // The powered by DrupalGap block.
    powered_by: { }

  }
};

Created theme in $THEME_DIRECTORY, follow the 1, 2, 3 listed above to use it.

"

}

# ...

# Check for an input argument command, let them know it is ready if they
# didn't supply one.
if [ -z "$1" ]
  then
    echo "The DrupalGap CLI is ready!"
    exit 1
fi

# Determine the command and call its handler.
case "$1" in
create)
  case "$2" in
    module) drupalgap_create_module $3;;
    theme) drupalgap_create_theme $3;;
  esac
  ;;
download|dl) drupalgap_download_project $2 $3;;
update|up) drupalgap_update;;
-*) usage "Unknown command: $1";;
esac
