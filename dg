#!/bin/bash

# @TODO this file is getting huge, break it up into smaller scripts.

# Globals
APP_MODULES_DIRECTORY="modules"
APP_MODULES_CONTRIB_DIRECTORY="$APP_MODULES_DIRECTORY/contrib"
APP_MODULES_CUSTOM_DIRECTORY="$APP_MODULES_DIRECTORY/custom"
APP_THEMES_DIRECTORY="themes"
APP_BACKUPS_DIRECTORY=".drupalgap-backups"
DRUPALGAP_JS_URL="https://raw.githubusercontent.com/signalpoint/DrupalGap/8.x-1.x/drupalgap.js"
DRUPALGAP_MIN_JS_URL="https://raw.githubusercontent.com/signalpoint/DrupalGap/8.x-1.x/drupalgap.min.js"

# Export the globals so they can be shared in other scripts.
export APP_MODULES_DIRECTORY
export APP_MODULES_CONTRIB_DIRECTORY
export APP_MODULES_CUSTOM_DIRECTORY
export APP_THEMES_DIRECTORY
export APP_BACKUPS_DIRECTORY
export DRUPALGAP_JS_URL
export DRUPALGAP_MIN_JS_URL

# MODULE CREATE
function drupalgap_create_module() {

  MODULE_NAME="$1";
  MODULE_DIRECTORY="$APP_MODULES_CUSTOM_DIRECTORY/$MODULE_NAME"
  HOOK_MENU="$MODULE_NAME"
  HOOK_MENU+="_menu"
  PAGE_CALLBACK="$MODULE_NAME"
  PAGE_CALLBACK+="_page"
  FILE_URI="$MODULE_DIRECTORY/$MODULE_NAME.js"

  # Create the app/modules directory if it doesn't exist.
  if [ ! -d "$APP_MODULES_DIRECTORY" ]; then
    mkdir $APP_MODULES_DIRECTORY
  fi

  # Create the app/modules/custom directory if it doesn't exist.
  if [ ! -d "$APP_MODULES_CUSTOM_DIRECTORY" ]; then
    mkdir $APP_MODULES_CUSTOM_DIRECTORY
  fi

  # Create the module's directory, or warn if it already exists.
  if [ -d "$MODULE_DIRECTORY" ]; then
    echo "$MODULE_NAME already exists..."
    exit
  fi

  mkdir $MODULE_DIRECTORY
  echo "dg.createModule('$MODULE_NAME');

/**
 * Defines routes for $MODULE_NAME.
 */
$MODULE_NAME.routing = function() {
  var routes = {};

  // My example page route.
  routes[\"$MODULE_NAME.example\"] = {
    \"path\": \"/hello-world\",
    \"defaults\": {
      \"_title\": \"Hello World\",
      \"_controller\": function() {

        // Make a greeting for the current user.
        var account = dg.currentUser();
        var msg = account.isAuthenticated() ?
          'Hello ' + account.getAccountName() :
          'Hello World';

        // Prepare our page's render element.
        var element = {};
        element['my_widget'] = {
          _markup: '<p>' + msg + '</p>'
        };

        // Send the element back to be rendered on the page.
        ok(element);

      }
    }
  };

  return routes;
};" > "$FILE_URI"
  
  # Find the line number after the settings.js include.
  INSERT_LINE=$(( `cat index.html | grep -n "settings.js" | awk '{ print $1 }' | tr -d ':'` +1 ))
  # insert the module include at that line
  sed -i "${INSERT_LINE}i \    <script src=\"$FILE_URI\"></script>" index.html

  echo "
Created module in $MODULE_DIRECTORY

The following has been added to your index.html:

<script src=\"$FILE_URI\"></script>
"

}

function drupalgap_create_theme() {

  THEME_NAME="$1";
  THEME_CLASS_NAME="${THEME_NAME^}"
  THEME_DIRECTORY="$APP_THEMES_DIRECTORY/$THEME_NAME"
  FILE_URI="$THEME_DIRECTORY/$THEME_NAME.js"

  # Create the app/themes directory if it doesn't exist.
  if [ ! -d "$APP_THEMES_DIRECTORY" ]; then
    mkdir $APP_THEMES_DIRECTORY
  fi

  # Create the theme's directory, or warn if it already exists.
  if [ -d "$THEME_DIRECTORY" ]; then
    echo "$THEME_NAME already exists..."
    exit
  fi

  mkdir $THEME_DIRECTORY


# WARNING: any changes here should be reflected in the "create a custom theme" docs.

    echo "// The $THEME_NAME theme constructor.
dg.themes.$THEME_CLASS_NAME = function() {
  this.regions = {
    header: { },
    content: { },
    footer: { }
  };
};
// Extend the DrupalGap Theme prototype.
dg.themes.$THEME_CLASS_NAME.prototype = new dg.Theme;
dg.themes.$THEME_CLASS_NAME.prototype.constructor = dg.themes.$THEME_CLASS_NAME;" > "$FILE_URI"
  echo "1. Include it in the index.html file:

<script src=\"$FILE_URI\"></script>

2. Set it as the active theme in the settings.js file:

// The active theme.
drupalgap.settings.theme = {
  name: '$THEME_NAME',
  path: 'themes/$THEME_NAME'
};

3. Add some blocks to the theme's regions in the settings.js file:

drupalgap.settings.blocks[dg.config('theme').name] = {
  header: {

    // DrupalGap's administration menu block.
    admin_menu: {
      roles: [
        { target_id: 'administrator', visible: true }
      ]
    }

  },
  content: {

    // DrupalGap's page title block.
    title: { },

    // DrupalGap's "main" content block.
    main: { }

  },
  footer: {

    // The powered by DrupalGap block.
    powered_by: { }

  }
};

Created theme in $THEME_DIRECTORY, follow the 1, 2, 3 listed above to use it.

"

}

# ...

# Check for an input argument command, let them know it is ready if they
# didn't supply one.
if [ -z "$1" ]
  then
    echo "The DrupalGap CLI is ready!"
    exit 1
fi

# Determine the command and call its handler.
case "$1" in
create)
  case "$2" in
    module) drupalgap_create_module $3;;
    theme) drupalgap_create_theme $3;;
  esac
  ;;
download|dl) ./scripts/dg/download.sh $@ ;;
enable|en) ./scripts/dg/enable.sh $@ ;;
update|up) ./scripts/dg/update.sh $@ ;;
-*) usage "Unknown command: $1";;
esac
